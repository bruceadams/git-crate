#!/usr/bin/env bash

VERSION="0.0.1-SNAPSHOT"

#CLASSPATH=src/:"$(find lib/ -follow -mindepth 1 -maxdepth 1 -print0 2> /dev/null | tr \\0 \:)":$CLASSPATH
PALLET_JAR="$HOME/.m2/repository/pallet/pallet/$VERSION/pallet-$VERSION-standalone.jar"
CLOJURE_JAR="$HOME/.m2/repository/org/clojure/clojure/1.1.0/clojure-1.1.0.jar"

# normalize $0 on certain BSDs
if [ "$(dirname $0)" = "." ]; then
    SCRIPT="$(which $(basename $0))"
else
    SCRIPT="$0"
fi

# resolve symlinks to the script itself portably
while [ -h "$SCRIPT" ] ; do
    ls=`ls -ld "$SCRIPT"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        SCRIPT="$link"
    else
        SCRIPT="`dirname "$SCRIPT"`/$link"
    fi
done

BIN_DIR="$(dirname "$SCRIPT")"

if [ -r "$BIN_DIR/../src/pallet/core.clj" ]; then
    # Running from source checkout
    PALLET_DIR="$(dirname "$BIN_DIR")"
    PALLET_LIBS="$(find -H $PALLET_DIR/lib -mindepth 2> /dev/null 1 -maxdepth 1 -print0 | tr \\0 \:)"
    # PALLET_LIBS=$( echo $PALLET_LIBS | sed s#:./lib/clojure-1.1.0.jar## )
    CLASSPATH="$PALLET_DIR/src:$PALLET_DIR/pallet:$PALLET_LIBS:$CLASSPATH"

    if [ "$PALLET_LIBS" = "" -a "$1" != "self-install" ]; then
        echo "Your Pallet development checkout is missing its dependencies."
        echo "Please download a stable version of Pallet to fetch the deps."
        echo "See the \"Hacking\" section of the readme for details."
        exit 1
    fi
else
    # Not running from a checkout
    CLASSPATH="$PALLET_JAR:$CLASSPATH:./pallet"

    if [ ! -r "$PALLET_JAR" -a "$1" != "self-install" ]; then
        echo "Pallet is not installed. Please run \"pallet self-install\"."
        exit 1
    fi
fi

if [ $DEBUG ]; then
    echo $CLASSPATH
fi

# escape command-line arguments so they can be evaled as strings
ESCAPED_ARGS=""
for ARG in "$@"; do
  ESCAPED_ARGS="$ESCAPED_ARGS"' "'$(echo $ARG | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')'"'
done

HTTP_CLIENT="wget -O"
if type -p curl >/dev/null 2>&1; then
    HTTP_CLIENT="curl -L -o"
fi

if [ "$1" = "repl" ]; then
    if [ -r project.clj ]; then
        echo "Warning: the repl task currently doesn't honor some project.clj"
        echo "options due to I/O stream issues. Future versions will address"
        echo "this, but for now you will get more consistent behaviour from repls"
        echo "launched by either the pallet-swank plugin or the pallet-nailgun plugin."
        echo
    fi
    # Use rlwrap if it's available, otherwise fall back to JLine
    RLWRAP=`which rlwrap`
    JLINE=jline.ConsoleRunner
    if [ $RLWRAP != "" ]; then
        JLINE=
    fi
    $RLWRAP java -client $JAVA_OPTS -cp "src/:classes/:resources/:$CLASSPATH" $JLINE clojure.main ${@:2}
elif [ "$1" = "self-install" ]; then
#     if [[ $VERSION == *SNAPSHOT ]]; then
#         echo "The self-install task is only meant for stable releases."
#         echo "See the \"Hacking\" section of the README."
#         exit 1
#     fi
    echo "Downloading Pallet now..."
    PALLET_DIR=`dirname "$PALLET_JAR"`
    mkdir -p "$PALLET_DIR"

    PALLET_URL="http://github.com/downloads/hugoduncan/pallet/pallet-$VERSION-standalone.jar"
    exec $HTTP_CLIENT "$PALLET_JAR" "$PALLET_URL"
elif [ "$1" = "upgrade" ]; then
#     if [[ $VERSION == *SNAPSHOT ]]; then
#         echo "The upgrade task is only meant for stable releases."
#         echo "See the \"Hacking\" section of the README."
#         exit 1
#     fi
    if [ ! -w "$SCRIPT" ]; then
        echo "You do not have permission to upgrade the installation in $SCRIPT"
        exit 1
    else
        echo "The script at $SCRIPT will be upgraded to the latest stable version."
        echo -n "Do you want to continue [Y/n]? "
        read RESP
        case "$RESP" in
            y|Y|"")
                echo
                echo "Upgrading..."
		if [[ $VERSION == *SNAPSHOT ]]; then
		    BRANCH="master"
		else
		    BRANCH="stable"
		fi
                PALLET_SCRIPT_URL="http://github.com/hugoduncan/pallet/raw/$BRANCH/bin/pallet"
                $HTTP_CLIENT "$SCRIPT" "$PALLET_SCRIPT_URL" \
                    && chmod +x "$SCRIPT" \
                    && echo && $SCRIPT self-install && echo && echo "Now running" `$SCRIPT version`
                exit $?;;
            *)
                echo "Aborted."
                exit 1;;
        esac
    fi
else
    if type -p cygpath >/dev/null 2>&1; then
        # When running on Cygwin, use Windows-style paths for java
        CLOJURE_JAR=`cygpath -w "$CLOJURE_JAR"`
        CLASSPATH=`cygpath -wp "$CLASSPATH"`
    fi

    # The -Xbootclasspath argument is optional here: if the jar
    # doesn't exist everything will still work, it will just have a
    # slower JVM boot. -Xbootclasspath/a:"$CLOJURE_JAR"
    exec java  -client $JAVA_OPTS -cp "$CLASSPATH" -Dpallet.version="$VERSION" clojure.main -e "(require 'pallet.main)(pallet.main/-main $ESCAPED_ARGS)"
fi
