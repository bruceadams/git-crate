#!/usr/bin/env bash
if [ \( "$(dirname $0)" == "." \) ]; then SCRIPT=$(which $(basename $0));else SCRIPT=$0;fi
while [ -h ${SCRIPT} ]; do
ls=$(ls -ld "${SCRIPT}")
link=$(expr "${ls}" : '.*-> \(.*\)$')
if expr "${link}" : '/.*' > /dev/null; then SCRIPT="${link}";else SCRIPT="$(dirname ${SCRIPT})/${link}";fi
done
BIN_DIR="$(dirname "${SCRIPT}")"
HTTP_CLIENT="wget "
HTTP_OUTFILE="-O "
HTTP_STDOUT="-q -O - "
if type -p curl >/dev/null 2>&1; then
HTTP_CLIENT="curl -L "
HTTP_OUTFILE="-o "
HTTP_STDOUT=""
fi
settings=${HOME}/.m2/settings.xml
default_repo=${HOME}/.m2/repository
if [ -e ${settings} ]; then
repo=$({ cat ${settings} | tr -d '
	 ' | egrep -o "<localRepository>(.*)</localRepository>" | sed -e "s%\${user.home}%${HOME}%" -e "s%<localRepository>%%" -e "s%</localRepository>%%"; } || echo ${default_repo})
if [ \( "${repo}" == "" \) ]; then repo=${default_repo};fi
else repo=${user-home}/.m2/repository;fi
function snapshot-path() {
version=$1
metafile=$2
base_path=$3
METADATA=$(${HTTP_CLIENT} ${HTTP_STDOUT} ${metafile})
JARDATE=$(echo ${META} | egrep "[0-9]{8}\.[0-9]{6}" -o)
JARBUILD=$(echo ${META} | fgrep buildNumber | egrep "[0-9]+" -o)
JARVERSION=0.0.1
echo ${base_path}${JARVERSION}-${JARDATE}-${JARBUILD}.jar
 }
function do-download() {
echo "Downloading dependencies..."
{ ${HTTP_CLIENT} $HTTP_OUTFILE "${repo}/pallet/pallet/0.0.1-SNAPSHOT/pallet-0.0.1-SNAPSHOT.jar" "$(snapshot-path 0.0.1-SNAPSHOT http://clojars.org/repo/pallet/pallet/0.0.1-SNAPSHOT/maven-metadata.xml http://clojars.org/repo/pallet/pallet/0.0.1-SNAPSHOT/pallet-)" && ${HTTP_CLIENT} $HTTP_OUTFILE "${repo}/org/clojure/clojure/1.2.0-master-SNAPSHOT/clojure-1.2.0-master-SNAPSHOT.jar" "$(snapshot-path 1.2.0-master-SNAPSHOT http://build.clojure.org/snapshots/org/clojure/clojure/1.2.0-master-SNAPSHOT/maven-metadata.xml http://build.clojure.org/snapshots/org.clojure/org/clojure/1.2.0-master-SNAPSHOT/clojure-)"; } || { echo Downloading dependencies failed ; exit 1 ; } >&2
echo "...done"
 }
function do-upgrade() {
if [ ! -w $SCRIPT ]; then
echo You do not have permission to upgrade the installation in  ${SCRIPT}
exit 1
fi
echo The script at  ${SCRIPT}  will be upgraded to the latest stable version.
echo -n Do you want to continue [Y/n]?
read RESPONSE
case ${RESPONSE} in
y|Y|"")
echo null
echo Upgrading...
BRANCH=master
PALLET_SCRIPT_URL="http://github.com/hugoduncan/pallet/raw/${BRANCH}/bin/pallet"
${HTTP_CLIENT} $HTTP_OUTFILE "${SCRIPT}" "${PALLET_SCRIPT_URL}" && chmod +x "${SCRIPT}" && echo null && ${SCRIPT} self-install && echo null && echo Now running $(${SCRIPT} version)
exit $?
;;
*)
echo Aborted
exit 1
;;
esac
 }
function do-install() {
do-download
exit 0
 }
if [ \( "$1" == "self-install" \) ]; then do-install;fi
if [ \( "$1" == "upgrade" \) ]; then do-upgrade;fi
if [ -r ${BIN_DIR}/../src/pallet/core.clj ]; then
PALLET_DIR="$(dirname "${BIN_DIR}")"
PALLET_LIBS="$(find -H ${PALLET_DIR}/lib -mindepth 1 -maxdepth 1 -print0 2> /dev/null | tr \\0 \:)"
CLASSPATH="${PALLET_DIR}/src:${PALLET_LIBS}:${CLASSPATH}"
BOOTPATH=""
if [ \( \( "${PALLET_LIBS}" == "" \) -a \( "$1" != "self-install" \) \) ]; then
echo Your Pallet development checkout is missing its dependencies.
echo Please use you maven or lein to download the dependencies.
echo    cd  ${PALLET_DIR}
echo  and either:
echo    lein deps
echo    mvn -Dmaven.test.skip=true assembly:directory
exit 1
fi
else
if [ -r ./pallet/lib/pallet-0.0.1-SNAPSHOT.jar ]; then
PALLET_LIBS="$(find -H ./pallet/lib/ -mindepth 1 -maxdepth 1 -print0 2> /dev/null | tr \\0 \:)"
CLASSPATH="${PALLET_LIBS}:${CLASSPATH}"
BOOTPATH=""
else
if [ -r ./lib/pallet-0.0.1-SNAPSHOT.jar ]; then
PALLET_LIBS="$(find -H ./lib/ -mindepth 1 -maxdepth 1 -print0 2> /dev/null | tr \\0 \:)"
CLASSPATH="${PALLET_LIBS}:${CLASSPATH}"
BOOTPATH=""
else
CLASSPATH="${repo}/pallet/pallet/0.0.1-SNAPSHOT/pallet-0.0.1-SNAPSHOT.jar:${repo}/org/clojure/clojure/1.2.0-master-SNAPSHOT/clojure-1.2.0-master-SNAPSHOT.jar:${CLASSPATH}"
fi
fi
BOOTPATH=""
fi
if type -p cygpath >/dev/null 2>&1; then
CLOJURE_JAR=$(cygpath -w "${CLOJURE_JAR}")
CLASSPATH=$(cygpath -w "${CLASSPATH}")
fi
if [ $DEBUG ]; then echo ${CLASSPATH};fi
exec ${RLWRAP} java -client ${JAVA_OPTS} -cp "${CLASSPATH}" -Dpallet.version=0.0.1-SNAPSHOT ${JLINE} clojure.main -e "(use 'pallet.main)(-main)" /dev/null $@
